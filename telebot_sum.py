import datetime
import time
from pdf2image import convert_from_bytes
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
import logging
from key import token, link
import pytz
import requests
import gspread
import re
from dateutil.relativedelta import *
from io import BytesIO


updater = Updater(token=token, use_context=True)
dispatcher = updater.dispatcher


def creds():
    sa = gspread.service_account(filename="service-account-google.json")
    sh = sa.open("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π new")
    wks = sh.worksheet("!–î–ª—è —á–∞—Ç-–±–æ—Ç–∞")
    return (wks)


def sheets_set(date_start, date_end, granularity = ""):
    print(date_start,date_end)
    wks = creds()
    global date_start_init, date_end_init
    date_start_init = wks.acell("D6").value
    date_end_init = wks.acell("D7").value

    wks.update("D6", date_start, raw=False)
    wks.update("D7", date_end, raw=False)
    days = (datetime.datetime.strptime(date_end, "%d.%m.%Y").date()-datetime.datetime.strptime(date_start, "%d.%m.%Y").date()).days
    print(days)
    #—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–¥–Ω–∏/–Ω–µ–¥–µ–ª–∏)
    if granularity == "":
        #–µ—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–¥–∞–Ω–∞, —Ç–æ –ø—Ä–µ–∏–æ–¥ –±–æ–ª–µ–µ 25 –¥–Ω–µ–π –±—É–¥–µ—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ –Ω–µ–¥–µ–ª—è–º, –∞ –º–µ–Ω–µ–µ ‚Äî –ø–æ –¥–Ω—è–º
        if days>25:
            print()
            wks.update("E10", "–Ω–µ–¥–µ–ª—è–º", raw=False)
        else:
            wks.update("E10", "–¥–Ω—è–º", raw=False)
    #–µ—Å–ª–∏ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    else: wks.update("E10", granularity, raw=False)

def get_texts():
    wks = creds()
    date_start = wks.acell("D6").value
    date_end = wks.acell("D7").value
    v_sc = int(wks.acell("H7").value)
    v_sum = int(wks.acell("I7").value)
    try:
        v_sum_zamech = int(wks.acell("J7").value)
        if v_sc / v_sum < 0.3:
            tag_1 = "üî¥"
        elif v_sc / v_sum < 0.6:
            tag_1 = "üü†"
        else:
            tag_1 = "üü¢"

        if v_sc / v_sum > 0.5:
            tag_2 = "üî¥"
        elif v_sc / v_sum > 0.2:
            tag_2 = "üü†"
        else:
            tag_2 = "üü¢"
        v_sum_all_procent = f"{v_sum / v_sc:.0%}"
        v_sum_zamech_procent = f"{v_sum_zamech / v_sum:.0%}"
        v_sum_success_procent = f"{(v_sum - v_sum_zamech) / v_sc:.0%}"
        text = str("–° " + date_start + " –ø–æ " + date_end + ":\n\n–í—Å–µ–≥–æ –≤ –°–¶ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ " + str(
            v_sc) + " –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∏–∑ –Ω–∏—Ö –≤ –°–£–ú ‚Äî " + str(
            v_sum) + " (" + v_sum_all_procent + ") " + tag_1 + "\n\n–ò–∑ " + str(
            v_sum) + " –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –°–£–ú " + str(
            v_sum_zamech) + " –±—ã–ª–∏ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ (" + v_sum_zamech_procent + ") " + tag_2 + "\n\n–ò—Ç–æ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –°–£–ú: " + v_sum_success_procent)
    except:
        text = str("–° " + date_start + " –ø–æ " + date_end + ":\n\n–í—Å–µ–≥–æ –≤ –°–¶ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ " + str(v_sc) + " –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∏–∑ –Ω–∏—Ö –≤ –°–£–ú ‚Äî " + "0 üî¥")
    return (text)

def download_as_png():
    response = requests.get(
        link)
    image = convert_from_bytes(response.content)[1].crop((100, 100, 1630, 1000))
    return (image)

def take_photo(mode):
    if mode == "custom":
        global start_inp, end_inp
        sheets_set(start_inp, end_inp)
    elif mode == "current_14":
        end_cur = (datetime.date.today())
        start_cur = (end_cur - datetime.timedelta(days=14))
        end_cur = end_cur.strftime("%d.%m.%Y")
        start_cur = start_cur.strftime("%d.%m.%Y")
        sheets_set(start_cur, end_cur)
    elif mode == "current_30":
        end_cur = (datetime.date.today())
        # start_cur = (end_cur - datetime.timedelta(days=30))
        print(end_cur.day)
        start_cur = end_cur+relativedelta(months=-1)
        end_cur = end_cur.strftime("%d.%m.%Y")
        start_cur = start_cur.strftime("%d.%m.%Y")
        sheets_set(start_cur, end_cur)
    elif mode == "nakop":
        end_cur = (datetime.date.today())
        start_cur = datetime.date(2022,8,1)
        end_cur = end_cur.strftime("%d.%m.%Y")
        start_cur = start_cur.strftime("%d.%m.%Y")
        sheets_set(start_cur, end_cur)
    img = download_as_png()
    bio = BytesIO()
    bio.name = 'image.png'
    img.save(bio, 'png')
    bio.seek(0)
    img = bio.getvalue()
    text = get_texts()
    return img, text

b = False
chats = []
def auto_report(update, context):
    global b, chats
    command = context.args[0].lower()
    if("on" == command):
        b = True
        chats.append(update.effective_chat.id)
        update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å—Ä–µ–¥—É –≤ 13:00 ‚úÖ")
        # update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 13:00 ‚úÖ")
    elif("off" == command):
        b = False
        update.message.reply_text("–¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ-–æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç")
        try:
            chats.remove(update.effective_chat.id)
        except:
            pass
dispatcher.add_handler(CommandHandler('auto_report', auto_report))
j = updater.job_queue

def planned(context: CallbackContext):
    global b, chats
    print(chats)
    img1, text1 = take_photo("current_14")
    img2, text2 = take_photo("nakop")
    for id in chats:
        context.bot.send_photo(chat_id=id, photo=img1, caption=text1)
        context.bot.send_photo(chat_id=id, photo=img2, caption=text2)
    sheets_set(date_start_init, date_end_init)
job_daily = j.run_daily(planned, days=[2], time=datetime.time(hour=12, minute=59, second=45, tzinfo=pytz.timezone("Europe/Moscow")))
# job_daily = j.run_repeating(planned, 30)


def start(update, context):
    message = '–ü—Ä–∏–≤–µ—Ç!'
    context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    print(update.effective_chat)
start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

def sub_id_list(update, context):
    if not chats: message = "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    else: message = ",".join(map(str,chats))
    context.bot.send_message(chat_id=update.effective_chat.id, text=message)
dispatcher.add_handler(CommandHandler('sub_id_list', sub_id_list))


def report_2_weeks(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text = "–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏ –°–£–ú –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π ‚è±")
    try:
        img, text = take_photo("current_14")
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, caption=text)
        sheets_set(date_start_init, date_end_init)
    except:
        try:
            sheets_set(date_start_init, date_end_init)
        except:
            pass
        context.bot.send_message(chat_id = update.effective_chat.id, text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç")
dispatcher.add_handler(CommandHandler('report_2_weeks', report_2_weeks))

def report_month(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text = "–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏ –°–£–ú –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ‚è±")
    try:
        img, text = take_photo("current_30")
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, caption=text)
        sheets_set(date_start_init, date_end_init)
    except Exception as e:
        print(e)
        try:
            sheets_set(date_start_init, date_end_init)
        except:
            pass
        context.bot.send_message(chat_id = update.effective_chat.id, text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç")
dispatcher.add_handler(CommandHandler('report_month', report_month))

def report_custom(update, context):
    context.bot.send_message(update.effective_chat.id,
                             "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n_–¥–¥.–º–º.–≥–≥–≥–≥, –¥–¥.–º–º.–≥–≥–≥–≥_",parse_mode='Markdown' )
    context.user_data[report_custom] = True

def report_custom_send(update, context):
    if context.user_data[report_custom]:
        try:
            global start_inp, end_inp
            print("jjj")
            date_inp = re.split(r'\s*,\s*',update.message.text)
            print(date_inp)
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏ –°–£–ú –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚è±", reply_to_message_id=update.message.message_id)
            # update.message.reply_text(text="–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏ –°–£–ú –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚è±")
            start_inp = date_inp[0]
            end_inp = date_inp[1]
            img, text = take_photo("custom")
            context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, caption=text)
            sheets_set(date_start_init, date_end_init)
        except Exception as e:
            print(e)
            try:
                sheets_set(date_start_init, date_end_init)
            except Exception as e:
                print(e)
                pass
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç")
        context.user_data[report_custom] = False

dispatcher.add_handler(CommandHandler('report_custom', report_custom))
dispatcher.add_handler(MessageHandler(Filters.regex("^[0-9\.\,\s]*$"), report_custom_send))



def help(update, context):
    command_list = []
    try:
        for i in dispatcher.handlers[0]:
            command_list.append('/'+i.command[0])
    except Exception:
        pass
    text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"+"\n".join(command_list)+"\n/help"
    context.bot.send_message(chat_id = update.effective_chat.id, text = text)
dispatcher.add_handler(CommandHandler('help', help))

updater.start_polling()
updater.idle()